// Generated by jextract

package io.crowds.lib.boringtun;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class wireguard_ffi_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .MAX_WIREGUARD_PACKET_SIZE = 65600;
     * }
     */
    public static int MAX_WIREGUARD_PACKET_SIZE() {
        return (int)65600L;
    }
    /**
     * {@snippet :
     * enum result_type.WIREGUARD_DONE = 0;
     * }
     */
    public static int WIREGUARD_DONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum result_type.WRITE_TO_NETWORK = 1;
     * }
     */
    public static int WRITE_TO_NETWORK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum result_type.WIREGUARD_ERROR = 2;
     * }
     */
    public static int WIREGUARD_ERROR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum result_type.WRITE_TO_TUNNEL_IPV4 = 4;
     * }
     */
    public static int WRITE_TO_TUNNEL_IPV4() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum result_type.WRITE_TO_TUNNEL_IPV6 = 6;
     * }
     */
    public static int WRITE_TO_TUNNEL_IPV6() {
        return (int)6L;
    }
    public static MethodHandle set_logging_function$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"set_logging_function");
    }
    /**
     * {@snippet :
     * _Bool set_logging_function(void (*log_func)(char*));
     * }
     */
    public static boolean set_logging_function(MemorySegment log_func) {
        var mh$ = set_logging_function$MH();
        try {
            return (boolean)mh$.invokeExact(log_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle new_tunnel$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"new_tunnel");
    }
    /**
     * {@snippet :
     * struct wireguard_tunnel* new_tunnel(char* static_private, char* server_static_public, char* preshared_key, uint16_t keep_alive, uint32_t index);
     * }
     */
    public static MemorySegment new_tunnel(MemorySegment static_private, MemorySegment server_static_public, MemorySegment preshared_key, short keep_alive, int index) {
        var mh$ = new_tunnel$MH();
        try {
            return (MemorySegment)mh$.invokeExact(static_private, server_static_public, preshared_key, keep_alive, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tunnel_free$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"tunnel_free");
    }
    /**
     * {@snippet :
     * void tunnel_free(struct wireguard_tunnel*);
     * }
     */
    public static void tunnel_free(MemorySegment x0) {
        var mh$ = tunnel_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wireguard_write$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$6,"wireguard_write");
    }
    /**
     * {@snippet :
     * struct wireguard_result wireguard_write(struct wireguard_tunnel* tunnel, const uint8_t* src, uint32_t src_size, uint8_t* dst, uint32_t dst_size);
     * }
     */
    public static MemorySegment wireguard_write(SegmentAllocator allocator, MemorySegment tunnel, MemorySegment src, int src_size, MemorySegment dst, int dst_size) {
        var mh$ = wireguard_write$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, tunnel, src, src_size, dst, dst_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wireguard_read$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$0,"wireguard_read");
    }
    /**
     * {@snippet :
     * struct wireguard_result wireguard_read(struct wireguard_tunnel* tunnel, const uint8_t* src, uint32_t src_size, uint8_t* dst, uint32_t dst_size);
     * }
     */
    public static MemorySegment wireguard_read(SegmentAllocator allocator, MemorySegment tunnel, MemorySegment src, int src_size, MemorySegment dst, int dst_size) {
        var mh$ = wireguard_read$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, tunnel, src, src_size, dst, dst_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wireguard_tick$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"wireguard_tick");
    }
    /**
     * {@snippet :
     * struct wireguard_result wireguard_tick(struct wireguard_tunnel* tunnel, uint8_t* dst, uint32_t dst_size);
     * }
     */
    public static MemorySegment wireguard_tick(SegmentAllocator allocator, MemorySegment tunnel, MemorySegment dst, int dst_size) {
        var mh$ = wireguard_tick$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, tunnel, dst, dst_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wireguard_force_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"wireguard_force_handshake");
    }
    /**
     * {@snippet :
     * struct wireguard_result wireguard_force_handshake(struct wireguard_tunnel* tunnel, uint8_t* dst, uint32_t dst_size);
     * }
     */
    public static MemorySegment wireguard_force_handshake(SegmentAllocator allocator, MemorySegment tunnel, MemorySegment dst, int dst_size) {
        var mh$ = wireguard_force_handshake$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, tunnel, dst, dst_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wireguard_stats$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"wireguard_stats");
    }
    /**
     * {@snippet :
     * struct stats wireguard_stats(struct wireguard_tunnel* tunnel);
     * }
     */
    public static MemorySegment wireguard_stats(SegmentAllocator allocator, MemorySegment tunnel) {
        var mh$ = wireguard_stats$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, tunnel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


