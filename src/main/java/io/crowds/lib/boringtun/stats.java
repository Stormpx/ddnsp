// Generated by jextract

package io.crowds.lib.boringtun;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct stats {
 *     int64_t time_since_last_handshake;
 *     size_t tx_bytes;
 *     size_t rx_bytes;
 *     float estimated_loss;
 *     int32_t estimated_rtt;
 *     uint8_t reserved[56];
 * };
 * }
 */
public class stats {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    public static VarHandle time_since_last_handshake$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t time_since_last_handshake;
     * }
     */
    public static long time_since_last_handshake$get(MemorySegment seg) {
        return (long)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t time_since_last_handshake;
     * }
     */
    public static void time_since_last_handshake$set(MemorySegment seg, long x) {
        constants$0.const$4.set(seg, x);
    }
    public static long time_since_last_handshake$get(MemorySegment seg, long index) {
        return (long)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void time_since_last_handshake$set(MemorySegment seg, long index, long x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tx_bytes$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t tx_bytes;
     * }
     */
    public static long tx_bytes$get(MemorySegment seg) {
        return (long)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t tx_bytes;
     * }
     */
    public static void tx_bytes$set(MemorySegment seg, long x) {
        constants$0.const$5.set(seg, x);
    }
    public static long tx_bytes$get(MemorySegment seg, long index) {
        return (long)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tx_bytes$set(MemorySegment seg, long index, long x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rx_bytes$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t rx_bytes;
     * }
     */
    public static long rx_bytes$get(MemorySegment seg) {
        return (long)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t rx_bytes;
     * }
     */
    public static void rx_bytes$set(MemorySegment seg, long x) {
        constants$1.const$0.set(seg, x);
    }
    public static long rx_bytes$get(MemorySegment seg, long index) {
        return (long)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rx_bytes$set(MemorySegment seg, long index, long x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle estimated_loss$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float estimated_loss;
     * }
     */
    public static float estimated_loss$get(MemorySegment seg) {
        return (float)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float estimated_loss;
     * }
     */
    public static void estimated_loss$set(MemorySegment seg, float x) {
        constants$1.const$1.set(seg, x);
    }
    public static float estimated_loss$get(MemorySegment seg, long index) {
        return (float)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void estimated_loss$set(MemorySegment seg, long index, float x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle estimated_rtt$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t estimated_rtt;
     * }
     */
    public static int estimated_rtt$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t estimated_rtt;
     * }
     */
    public static void estimated_rtt$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int estimated_rtt$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void estimated_rtt$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(32, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


